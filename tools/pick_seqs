#!/usr/bin/env python

"""\
Usage:
    pick_seqs [<trajectories>...] [-v]... [options]

Options:
    -w --window <steps>     [default: 500]
        The minimum number of steps that must separate two picks.  This should 
        probably be about the auto-correlation time, to ensure that the picked 
        sequences are independent.

    -v --verbose
        Display extra information about the picks.  If specified once, the 
        sequence and score for each pick will be displayed.  If specified a 
        second time, the scores will be broken down term by term and secondary 
        structure predictions will be made.

    -s --sort
        If displaying individual sequences (i.e. with either -v or -vv), sort 
        the sequences by score rather than by chronology.
"""

import docopt, utils, statistics
from tabulate import tabulate
from textwrap import indent
from pprint import pprint

args = docopt.docopt(__doc__)
best_seqs = utils.pick_best_seqs(args['<trajectories>'], int(args['--window']))
best_scores = [x.score for x in best_seqs]

if not best_scores:
    print("No picks made")
    raise SystemExit

print("Num Picks:", len(best_seqs))
print("Best Score: {:.4f}".format(max(best_scores)))
print("Worst Score: {:.4f}".format(min(best_scores)))
print("Average Score: {:.4f} Â± {:.4f}".format(
    statistics.mean(best_scores), statistics.stdev(best_scores)))

if args['--verbose'] >= 1:
    print()

    if args['--sort']:
        best_seqs.sort(key=lambda x: x.score, reverse=True)

    for pick in best_seqs:
        print('Step:', pick.i)
        print('Seq:', pick.seq)
        print('Score:', pick.score)

        if args['--verbose'] >= 2:
            print('Score Terms:')
            table = []
            for col in pick.traj.columns:
                if col.startswith('term_value'):
                    key = col[11:-1]
                    weight = pick.traj['term_weight[%s]' % key][pick.i]
                    value = pick.traj[col][pick.i]
                    table.append((key, weight * value))
            table.sort(key=lambda x: x[1], reverse=True)
            print(indent(tabulate(table, tablefmt='plain', floatfmt='.4f'), '  '))
            print("Apo Fold:")
            print(indent(utils.run_rnafold(pick.seq, theo=False), '  '))
            print("Holo Fold:")
            print(indent(utils.run_rnafold(pick.seq, theo=True), '  '))

        print()
        
