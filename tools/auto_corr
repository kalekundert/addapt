#!/usr/bin/env python3

"""\
Usage:
    auto_corr.py [<trajectory>] [options]

Options:
    -w --window <steps>      [default: 500]
        Calculate the auto-correlation for the given number of steps.

    -s --stride <steps>     [default: 10]
        The number of steps to skip between each measurement.  This can 
        dramatically speed up to calculation of long correlation times.

    -d --discard <steps>    [default: 100]
        Throw out the given number of steps from the beginning of the 
        simulation to account for equilibration.

    -o --output <path>
        Save the auto-correlation plot to the given path instead of showing it 
        in the GUI.
"""

import docopt, utils, tango
from pylab import *
from pprint import pprint

from os import fork
if fork(): raise SystemExit

args = docopt.docopt(__doc__)
traj = utils.load_trajectory(args['<trajectory>'])
traj_name = args['<trajectory>'] or 'logs/mh.tsv'
steps = int(args['--window'])
stride = int(args['--stride'])
discard = int(args['--discard'])

def autocorr(x, n=101):
    y0 = _autocorr(x, 0)
    return [1] + [_autocorr(x, k) / y0 for k in range(1, n)]

def _autocorr(x, k):
    N = len(x) - k
    mu = sum((x.count(c) / len(x))**2 for c in 'ACGU')
    return sum((x[i+k] == x[i]) - mu for i in range(N)) / N


seq_traj = traj['current_seq'][discard:-1:stride]
initial_seq = seq_traj.iloc[0]
i = 0

for pos in range(len(initial_seq)):
    # Skip positions that weren't designed.
    if initial_seq[pos].islower():
        i += 1
        continue

    pos_traj = [seq[pos] for seq in seq_traj]

    # Pick a color base on the most common nucleotide.
    counts = {c: pos_traj.count(c) for c in 'ACGU'}
    most_common = sorted(counts, key=lambda x: counts[x], reverse=True)[0]
    colors = {'A': tango.orange[1], 'U': tango.orange[1], 'C': tango.blue[1], 'G': tango.blue[1]}

    # Calculate and plot the auto-correlation.
    x = arange(0, steps + stride, stride)
    y = autocorr(pos_traj, (steps // stride) + 1)
    lines = plot(x, y, color=colors[most_common])

axhline(0, linewidth=2, color=tango.black)

title(traj_name)
xlabel("step")
ylabel("auto-correlation")
ylim(-0.2, 1.0)

title('{}: {}'.format(sys.argv[0], traj_name))
tight_layout()

if args['--output']:
    savefig(args['--output']);
else:
    gcf().canvas.set_window_title('{}: {}'.format(sys.argv[0], traj_name))
    show()
