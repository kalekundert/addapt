#!/usr/bin/env python3

"""\
Usage:
    plot_traj [<trajectory>] [options]

Options:
    -w --window <steps>
        If this option is provided, the independent sequences with the best 
        scores will be picked as in ``pick_seqs`` and the positions of those 
        sequences will be highlighted in the trajectory.  The window size is 
        the minimum number of steps that must separate two picks and should be 
        close to the auto-correlation time.
"""

import docopt, tango, utils
import pandas as pd
from pylab import *
from pprint import pprint

args = docopt.docopt(__doc__)
traj = utils.load_trajectory(args['<trajectory>'])
best_scores = []

# Highlight the best sequences, if a window was given.
if args['--window']:
    best_scores = utils.pick_best_scores(
            traj['current_score'], int(args['--window']))

def plot_best_scores():
    for i in best_scores:
        axvline(traj['step'][i], color=tango.red[1], linestyle=':')


# Go into the background.
from os import fork
if fork(): raise SystemExit

# Plot the score over time.
subplot(2, 1, 1)
plot_best_scores()
plot(traj['step'], traj['current_score'], color=tango.blue[2])
title(args['<trajectory>'])
ylabel('score')

# Plot the temperature over time.
subplot(2, 1, 2, sharex=gca())
plot_best_scores()
plot(traj['step'], traj['temperature'], color=tango.blue[2])
xlabel('step')
xlim(0, len(traj))
ylabel('temperature')

# Display the plot.
gcf().canvas.set_window_title('{}: {}'.format(
    sys.argv[0], args['<trajectory>']))
tight_layout()
show()

