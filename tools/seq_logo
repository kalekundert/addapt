#!/usr/bin/env python3

"""\
Usage:
    seq_logo [<trajectories>...] [options]

Options:
    -w --window <steps>     [default: 500]
        The minimum number of steps that must separate two picks.  This should 
        probably be about the auto-correlation time, to ensure that the picked 
        sequences are independent.

    -o --output <path>      [default: mh.pdf]
        The path where the sequence logo should be written.  The file type will 
        be deduced from the extension; valid options are: *.eps *.pdf *.png 
        *.jpeg *.svg
"""

import sys, docopt, tango
import numpy as np, pandas as pd
from pprint import pprint

def pick_peaks(scores, window_size):
    peaks = []
    scores = np.array(scores)
    BLOCKED = -1

    while scores.max() != BLOCKED:
        i = scores.argmax()
        window = slice(
                max(i - window_size//2, 0),
                min(i + window_size//2, len(scores)))

        if not any(scores[window] == BLOCKED):
            peaks.append(i)

        scores[window] = BLOCKED

    return peaks

def extract_pick(traj, i):
    pass

def assemble_seq(traj, i):
    seq = ''
    for col in traj.columns:
        if col.startswith('current_domain'):
            domain_seq = traj[col][i]
            if isinstance(domain_seq, str):
                seq += domain_seq
    return seq

def make_seqlogo(wt, seqs, path):
    import weblogolib as weblogo
    from weblogolib.colorscheme import ColorScheme, RefSeqColor, SymbolColor
    from pathlib import Path

    # Make the sequence logo.
    seqs = weblogo.SeqList(seqs, alphabet=weblogo.std_alphabets['rna'])
    data = weblogo.LogoData.from_seqs(seqs)
    options = weblogo.LogoOptions()
    options.logo_title = '{} N={}'.format(
            ' '.join(sys.argv[1:]),
            len(seqs),
    )
    options.show_fineprint = False
    options.color_scheme = ColorScheme([
        RefSeqColor(wt, '#dfe0e0'),
        SymbolColor("GC", '#178ccb'),
        SymbolColor("AU", '#f48024'),
    ])
    format = weblogo.LogoFormat(data, options)

    # Save the sequence logo to a file.
    # Deduce the file format from the extension of the given path.  
    path = Path(path)
    formatter = weblogo.formatters[path.suffix.strip('.')]
    with path.open('wb') as file:
        file.write(formatter(data, format))


# Print average score...

args = docopt.docopt(__doc__)
trajectories = args['<trajectories>'] or ['logs/mh.tsv']
window_size = int(args['--window'])
sequences = []

for tsv_path in trajectories:
    traj = pd.read_table(tsv_path)
    peaks = pick_peaks(traj['current_score'], window_size)
    sequences += [assemble_seq(traj, i) for i in peaks]

wildtype = assemble_seq(traj, 0)
make_seqlogo(wildtype, sequences, args['--output'])
